/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package events_go;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sergey
 */
public class EventsClass extends javax.swing.JFrame {

    private String driver_db;
    private String url_db;
    private String login_db;
    private String pass_db;
    
    int state = 0;
    
    class Event_class {
        String ID;
        String name;
        String start_datatime;
        String end_datatime;
        String cost;
        String type;
    }
    
    class type_class {
        String[] name = new String[10];
        int[] ID = new int[10];
        int[] age = new int[10];
    }
    
    type_class type = new type_class();
    String[] head_place = {"ID_PLACE","NAME","ADDRESS"};
    String[] head_person = {"ID_PERSON","NAME","FAMILY","AGE","ADDRESS"};
    String[] head_event = {"ID_EVENT","NAME","START DATE","END DATE","COST","TYPE"};
    DefaultTableModel tableModelPlace = new DefaultTableModel(null, head_place);
    DefaultTableModel tableModelPerson = new DefaultTableModel(null, head_person);
    DefaultTableModel tableModelEvent = new DefaultTableModel(null, head_event);
    DefaultComboBoxModel comboboxTypeModel = new DefaultComboBoxModel();
    
    /**
     * Creates new form EventsClass
     */
    public EventsClass() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_event = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_events = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField_name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jXDatePicker_startDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jFormattedTextField_startTime = new javax.swing.JFormattedTextField();
        jXDatePicker_endDate = new org.jdesktop.swingx.JXDatePicker();
        jFormattedTextField_endTime = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton_addEvent = new javax.swing.JButton();
        jButton_delEvent = new javax.swing.JButton();
        jButton_updateEvent = new javax.swing.JButton();
        jButton_ok = new javax.swing.JButton();
        jButton_cancel = new javax.swing.JButton();
        jComboBox_type = new javax.swing.JComboBox();
        jTextField_cost = new javax.swing.JTextField();
        jPanel_Place = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Place = new javax.swing.JTable();
        jButton_delete_Place = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton_view_places = new javax.swing.JButton();
        jButton_edit_Palces = new javax.swing.JButton();
        jPanel_persone = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Person = new javax.swing.JTable();
        jButton_add_person = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton_edit_persone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel_event.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable_events.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_events.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_eventsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_events);

        jLabel1.setText("Event name");

        jLabel2.setText("Start data time");

        jLabel3.setText("End data time");

        jFormattedTextField_startTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm:ss"))));

        jFormattedTextField_endTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm:ss"))));
        jFormattedTextField_endTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField_endTimeActionPerformed(evt);
            }
        });

        jLabel4.setText("Ticket cost");

        jLabel5.setText("Event type");

        jButton_addEvent.setText("Add Event");
        jButton_addEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addEventActionPerformed(evt);
            }
        });

        jButton_delEvent.setText("Delete Event");
        jButton_delEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_delEventActionPerformed(evt);
            }
        });

        jButton_updateEvent.setText("Update Event");
        jButton_updateEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_updateEventActionPerformed(evt);
            }
        });

        jButton_ok.setText("OK");
        jButton_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_okActionPerformed(evt);
            }
        });

        jButton_cancel.setText("Cancel");
        jButton_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelActionPerformed(evt);
            }
        });

        jComboBox_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField_cost.setText("0");

        javax.swing.GroupLayout jPanel_eventLayout = new javax.swing.GroupLayout(jPanel_event);
        jPanel_event.setLayout(jPanel_eventLayout);
        jPanel_eventLayout.setHorizontalGroup(
            jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel_eventLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_eventLayout.createSequentialGroup()
                        .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_name)
                            .addGroup(jPanel_eventLayout.createSequentialGroup()
                                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jXDatePicker_startDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField_cost))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFormattedTextField_startTime, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel_eventLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel_eventLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXDatePicker_endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jFormattedTextField_endTime))))))
                    .addGroup(jPanel_eventLayout.createSequentialGroup()
                        .addComponent(jButton_ok, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_cancel)
                        .addGap(34, 34, 34)
                        .addComponent(jButton_updateEvent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_delEvent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_addEvent)))
                .addContainerGap())
        );
        jPanel_eventLayout.setVerticalGroup(
            jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_eventLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jXDatePicker_startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextField_startTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker_endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField_endTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_addEvent)
                    .addComponent(jButton_delEvent)
                    .addComponent(jButton_updateEvent)
                    .addComponent(jButton_ok)
                    .addComponent(jButton_cancel))
                .addContainerGap())
        );

        jPanel_Place.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable_Place.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_Place);

        jButton_delete_Place.setText("Delete Place");
        jButton_delete_Place.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_delete_PlaceActionPerformed(evt);
            }
        });

        jButton1.setText("Add place");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton_view_places.setText("View places");
        jButton_view_places.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_view_placesActionPerformed(evt);
            }
        });

        jButton_edit_Palces.setText("Edit Places");
        jButton_edit_Palces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_edit_PalcesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_PlaceLayout = new javax.swing.GroupLayout(jPanel_Place);
        jPanel_Place.setLayout(jPanel_PlaceLayout);
        jPanel_PlaceLayout.setHorizontalGroup(
            jPanel_PlaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_PlaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_edit_Palces)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_view_places)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_delete_Place, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel_PlaceLayout.setVerticalGroup(
            jPanel_PlaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PlaceLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_PlaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_delete_Place)
                    .addComponent(jButton1)
                    .addComponent(jButton_view_places)
                    .addComponent(jButton_edit_Palces))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel_persone.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable_Person.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable_Person);

        jButton_add_person.setText("Add Persone");
        jButton_add_person.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_add_personActionPerformed(evt);
            }
        });

        jButton4.setText("Delete Persone");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton_edit_persone.setText("Edit Persone");
        jButton_edit_persone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_edit_personeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_personeLayout = new javax.swing.GroupLayout(jPanel_persone);
        jPanel_persone.setLayout(jPanel_personeLayout);
        jPanel_personeLayout.setHorizontalGroup(
            jPanel_personeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_personeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_edit_persone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_add_person, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane3)
        );
        jPanel_personeLayout.setVerticalGroup(
            jPanel_personeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_personeLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_personeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_add_person)
                    .addComponent(jButton4)
                    .addComponent(jButton_edit_persone))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_event, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_Place, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel_persone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_event, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_Place, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_persone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jButton_ok.setVisible(false);
        jButton_cancel.setVisible(false);
        jTable_events.setModel(tableModelEvent);
        jTable_Place.setModel(tableModelPlace);
        jTable_Person.setModel(tableModelPerson);
        jComboBox_type.setModel(comboboxTypeModel);
        GetType();
        Load_events();
        if (jTable_events.getRowCount() > 0) {
            jTable_events.setRowSelectionInterval(0, 0);
            LoadForm(0);
            LoadPlace(tableModelEvent.getValueAt(0, 0).toString());
            LoadPerson(tableModelEvent.getValueAt(0, 0).toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton_addEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addEventActionPerformed
        state = 1;
        jTextField_name.setText("");
        jFormattedTextField_startTime.setText("00:00:00");
        jFormattedTextField_endTime.setText("00:00:00");
        jTextField_cost.setText("0");
        jComboBox_type.setSelectedIndex(1);
        jButton_ok.setVisible(true);
        jButton_cancel.setVisible(true);
    }//GEN-LAST:event_jButton_addEventActionPerformed

    private void jButton_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_okActionPerformed
        Event_class eventVar = new Event_class();
        eventVar.name = jTextField_name.getText();
        eventVar.cost = jTextField_cost.getText();
        eventVar.type = jComboBox_type.getSelectedItem().toString();
        SimpleDateFormat date_format = new SimpleDateFormat("dd.MM.yyyy");
        String dateStr = date_format.format(jXDatePicker_startDate.getDate());
        String timeStr = jFormattedTextField_startTime.getText();
        String outStr = dateStr +" "+timeStr+".0";
        eventVar.start_datatime = outStr;
        dateStr = date_format.format(jXDatePicker_endDate.getDate());
        timeStr = jFormattedTextField_endTime.getText();
        outStr = dateStr +" "+timeStr+".0";
        eventVar.end_datatime = outStr;
        
        if (state == 1) {
            addEvent(eventVar);
        }
        if (state == 2) {
            deleteEvent(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());
        }
        if (state == 3) {
            eventVar.ID = tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString();
            updateEvent(eventVar);
        }        
        
        Load_events();
        jTable_events.setRowSelectionInterval(0, 0);
        LoadForm(0);
        LoadPlace(tableModelEvent.getValueAt(0, 0).toString());
        LoadPerson(tableModelEvent.getValueAt(0, 0).toString());
        jButton_ok.setVisible(false);
        jButton_cancel.setVisible(false);  
    }//GEN-LAST:event_jButton_okActionPerformed

    private void jFormattedTextField_endTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField_endTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField_endTimeActionPerformed

    private void jTable_eventsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_eventsMouseClicked
        LoadForm(jTable_events.getSelectedRow());
        LoadPlace(jTable_events.getValueAt(jTable_events.getSelectedRow(),0).toString());
        LoadPerson(jTable_events.getValueAt(jTable_events.getSelectedRow(),0).toString());
    }//GEN-LAST:event_jTable_eventsMouseClicked

    private void jButton_delEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_delEventActionPerformed
        state = 2;
        jButton_ok.setVisible(true);
        jButton_cancel.setVisible(true);        
    }//GEN-LAST:event_jButton_delEventActionPerformed

    private void jButton_updateEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_updateEventActionPerformed
        state = 3;
        jButton_ok.setVisible(true);
        jButton_cancel.setVisible(true); 
    }//GEN-LAST:event_jButton_updateEventActionPerformed

    private void jButton_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cancelActionPerformed
        state = 0;
        jButton_ok.setVisible(false);
        jButton_cancel.setVisible(false);
    }//GEN-LAST:event_jButton_cancelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PlacesWindow Place_form = new PlacesWindow();
        Place_form.setConn_params(driver_db, url_db, login_db, pass_db);
        Place_form.setVisible(true);
        Place_form.Set_format(1);
        Place_form.Place_send_event(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_delete_PlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_delete_PlaceActionPerformed
        PlacesWindow Place_form = new PlacesWindow();
        Place_form.setConn_params(driver_db, url_db, login_db, pass_db);
        Place_form.setVisible(true);
        Place_form.Set_format(2);
        Place_form.Place_send_event(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());        
    }//GEN-LAST:event_jButton_delete_PlaceActionPerformed

    private void jButton_view_placesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_view_placesActionPerformed
        PlacesWindow Place_form = new PlacesWindow();
        Place_form.setConn_params(driver_db, url_db, login_db, pass_db);
        Place_form.Set_format(3);
        Place_form.setVisible(true);
        Place_form.Place_send_event(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());         
    }//GEN-LAST:event_jButton_view_placesActionPerformed

    private void jButton_edit_PalcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_edit_PalcesActionPerformed
        PlacesWindow Place_form = new PlacesWindow();
        Place_form.setConn_params(driver_db, url_db, login_db, pass_db);
        Place_form.Set_format(4);
        Place_form.setVisible(true);
        Place_form.Place_send_event(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());  
    }//GEN-LAST:event_jButton_edit_PalcesActionPerformed

    private void jButton_add_personActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_add_personActionPerformed
        personeClass Persone_form = new personeClass();
        Persone_form.setConn_params(driver_db, url_db, login_db, pass_db);
        Persone_form.Set_format(1);
        Persone_form.setVisible(true);
        Persone_form.Place_send_event(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());  
    }//GEN-LAST:event_jButton_add_personActionPerformed

    private void jButton_edit_personeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_edit_personeActionPerformed
        personeClass Persone_form = new personeClass();
        Persone_form.setConn_params(driver_db, url_db, login_db, pass_db);
        Persone_form.Set_format(2);
        Persone_form.setVisible(true);
        Persone_form.Place_send_event(tableModelEvent.getValueAt(jTable_events.getSelectedRow(), 0).toString());  
    }//GEN-LAST:event_jButton_edit_personeActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        deletePersone(jTable_Person.getValueAt(jTable_Person.getSelectedRow(), 0).toString(),jTable_events.getValueAt(jTable_events.getSelectedRow(), 0).toString());
        LoadPerson(jTable_events.getValueAt(jTable_events.getSelectedRow(),0).toString());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void deletePersone (String ID_Persone, String ID_Event) {
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment

            String query_str = "DELETE FROM GEO_PERSONE_EVENT WHERE (ID_PERSONE='"+ID_Persone+"') and (ID_EVENT='"+ID_Event+"')";

            stmt.execute(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
            
    private void deleteEvent (String ID_Event) {
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment

            String query_str = "DELETE FROM GEO_EVENT WHERE ID_PERSONE='"+ID_Event+"'";
            stmt.execute(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void GetType() {
        try {
            
            int counter = 0;
            comboboxTypeModel.removeAllElements();
            comboboxTypeModel.addElement("null");

            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "SELECT * FROM GEO_EVENT_TYPE"; //Create query
            
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            while(query_result.next()){
                type.ID[counter] = query_result.getInt("ID_TYPE");
                type.name[counter] = query_result.getString("NAME");
                type.age[counter] = query_result.getInt("AGE");
                        
                comboboxTypeModel.addElement(type.name[counter]);
                counter++;
            }
            
            db_connect.close();
            stmt.close();
            query_result.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateEvent(Event_class event_in) {
         try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment

            String ID_type = "1";
            
            for (int i=0; i<jComboBox_type.getItemCount()-1; i++) {
                if (type.name[i].equals(event_in.type)) {
                    ID_type = String.valueOf(type.ID[i]);
                    break;
                }
            }
                        
            String query_str = "UPDATE GEO_EVENT SET NAME ='"+event_in.name+"',START_DATATIME= TO_TIMESTAMP('"+event_in.start_datatime+"', 'DD.MM.RRRR HH24:MI:SS,FF'),"
                    + " END_DATATIME= TO_TIMESTAMP('"+event_in.end_datatime+"', 'DD.MM.RRRR HH24:MI:SS,FF'),"
                    + " COST='"+event_in.cost+"',"
                    + " ID_TYPE='"+ID_type+"'"
                    + " WHERE ID_EVENT='"+event_in.ID+"'";
            
            stmt.execute(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addEvent(Event_class event_in) {
        String ID_type = "1";
        try {
        
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            
            for (int i=0; i<jComboBox_type.getItemCount()-1; i++) {
                if (type.name[i].equals(event_in.type)) {
                    ID_type = String.valueOf(type.ID[i]);
                    break;
                }
            }
            
            String query_str = "INSERT INTO GEO_EVENT (NAME,START_DATATIME,END_DATATIME,COST,ID_TYPE) VALUES ('"+
                    event_in.name + "'," +  "TO_TIMESTAMP('"+event_in.start_datatime+"', 'DD.MM.RRRR HH24:MI:SS,FF')"
                    +"," + "TO_TIMESTAMP('"+event_in.end_datatime+"', 'DD.MM.RRRR HH24:MI:SS,FF')" + ",'" + event_in.cost + "','" + ID_type + "')";
            
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            db_connect.close();
            stmt.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void LoadPlace(String ID_event) {
        try {
            
            int counter = 0;
            tableModelPlace.setRowCount(0);
        
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "SELECT PL.ID_PLACE, PL.NAME, PL.ADDRESS"
                    + " FROM GEO_PLACE PL"
                    + " INNER JOIN GEO_PLACE_EVENT PE ON PL.ID_PLACE = PE.ID_PLACE"
                    + " WHERE PE.ID_EVENT ='" + ID_event +"'"; //Create query
            
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            while(query_result.next()){
                String ID = String.valueOf(query_result.getInt("ID_PLACE"));
                String name = query_result.getString("NAME");
                String address = query_result.getString("ADDRESS");
                
                String[] row = {ID,name,address};
                tableModelPlace.addRow(row);
                counter++;
            }
            
            db_connect.close();
            stmt.close();
            query_result.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    private void LoadPerson(String ID_event) {
        try {
            
            int counter = 0;
            tableModelPerson.setRowCount(0);
        
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "SELECT PE.ID_PERSONE, PE.NAME, PE.FAMILY_NAME, PE.ADDRESS, PE.AGE"
                    + " FROM GEO_PERSONE PE"
                    + " INNER JOIN GEO_PERSONE_EVENT EP ON PE.ID_PERSONE = EP.ID_PERSONE"
                    + " WHERE EP.ID_EVENT ='" + ID_event +"'"; //Create query
            
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            while(query_result.next()){
                String ID = String.valueOf(query_result.getInt("ID_PERSONE"));
                String name = query_result.getString("NAME");
                String family = query_result.getString("FAMILY_NAME");
                String address = query_result.getString("ADDRESS");
                String age = String.valueOf(query_result.getInt("AGE"));
                
                String[] row = {ID,name,family,age,address};
                tableModelPerson.addRow(row);
                counter++;
            }
            
            db_connect.close();
            stmt.close();
            query_result.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void LoadForm(int row_n) {
        try {
            jTextField_name.setText(tableModelEvent.getValueAt(row_n, 1).toString());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
            SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
            jXDatePicker_startDate.setDate(sdf.parse(tableModelEvent.getValueAt(row_n, 2).toString()));
            jFormattedTextField_startTime.setText(time.format(sdf.parse(tableModelEvent.getValueAt(row_n, 2).toString())));
            jXDatePicker_endDate.setDate(sdf.parse(tableModelEvent.getValueAt(row_n, 3).toString()));
            jFormattedTextField_endTime.setText(time.format(sdf.parse(tableModelEvent.getValueAt(row_n, 3).toString())));
            jTextField_cost.setText(tableModelEvent.getValueAt(row_n, 4).toString());
            for (int i=0; i<jComboBox_type.getItemCount(); i++) {
                if (comboboxTypeModel.getElementAt(i).toString().equals(tableModelEvent.getValueAt(row_n, 5).toString())) {
                    jComboBox_type.setSelectedIndex(i);
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(EventsClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
            
    private void Load_events() {
         try {
            
            int counter = 0;
            tableModelEvent.setRowCount(0);
        
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "SELECT EV.ID_EVENT, EV.NAME, EV.START_DATATIME, EV.END_DATATIME, EV.COST, ET.NAME as TYPE_NAME"
                    + " FROM GEO_EVENT EV"
                    + " INNER JOIN GEO_EVENT_TYPE ET ON EV.ID_TYPE = ET.ID_TYPE"; //Create query
            
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            while(query_result.next()){
                String ID = String.valueOf(query_result.getInt("ID_EVENT"));
                String name = query_result.getString("NAME");
                String start_data = query_result.getTimestamp("START_DATATIME").toString();
                String end_data = query_result.getTimestamp("END_DATATIME").toString();
                String cost = String.valueOf(query_result.getFloat("COST")).replace('.', ',');
                String name_type = query_result.getString("TYPE_NAME");
                String[] row = {ID,name,start_data,end_data,cost,name_type};
                tableModelEvent.addRow(row);
                counter++;
            }
            
            db_connect.close();
            stmt.close();
            query_result.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setConn_params (String driver,String url,String login,String pass) {
        driver_db = driver;
        url_db = url;
        login_db = login;
        pass_db = pass;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventsClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventsClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventsClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventsClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EventsClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton_addEvent;
    private javax.swing.JButton jButton_add_person;
    private javax.swing.JButton jButton_cancel;
    private javax.swing.JButton jButton_delEvent;
    private javax.swing.JButton jButton_delete_Place;
    private javax.swing.JButton jButton_edit_Palces;
    private javax.swing.JButton jButton_edit_persone;
    private javax.swing.JButton jButton_ok;
    private javax.swing.JButton jButton_updateEvent;
    private javax.swing.JButton jButton_view_places;
    private javax.swing.JComboBox jComboBox_type;
    private javax.swing.JFormattedTextField jFormattedTextField_endTime;
    private javax.swing.JFormattedTextField jFormattedTextField_startTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel_Place;
    private javax.swing.JPanel jPanel_event;
    private javax.swing.JPanel jPanel_persone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable_Person;
    private javax.swing.JTable jTable_Place;
    private javax.swing.JTable jTable_events;
    private javax.swing.JTextField jTextField_cost;
    private javax.swing.JTextField jTextField_name;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker_endDate;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker_startDate;
    // End of variables declaration//GEN-END:variables
}
