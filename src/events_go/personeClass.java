/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package events_go;

import java.awt.BorderLayout;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.openstreetmap.gui.jmapviewer.DefaultMapController;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
import org.openstreetmap.gui.jmapviewer.OsmTileLoader;
import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;

/**
 *
 * @author Sergey
 */
public class personeClass extends javax.swing.JFrame {

    private String driver_db;
    private String url_db;
    private String login_db;
    private String pass_db;
    private int count_persons;
    private DefaultTableModel tablemodel;
    int states = 0;
    int format = 0;
    String ID_add_event = "";
    
    private static final String URL         = "https://maps.googleapis.com/maps/api/geocode/xml";
    private static final String DEFAULT_KEY = "AIzaSyBTvVs2Lcn_Ul9NjmSDFlxw3CbYhInszxI"; 
    
    JMapViewer map;
    
     class coordinateClass { 
        double lat;
        double lon;
     }
    
    class Persone_class {
        int ID;
        String name;
        String Family_name;
        int Age;
        String Address;
    }
            
    /**
     * Creates new form personeClass
     */
    public personeClass() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField_age = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_fname = new javax.swing.JTextField();
        jTextField_address = new javax.swing.JTextField();
        jButton_add = new javax.swing.JButton();
        jButton_del = new javax.swing.JButton();
        jButton_DB_OK = new javax.swing.JButton();
        jButton_Change = new javax.swing.JButton();
        jButton_DB_Cancel = new javax.swing.JButton();
        jButton_persone = new javax.swing.JButton();
        jButton_cancel_add = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_persone = new javax.swing.JTable();
        jPanel_map = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Name");

        jLabel3.setText("Age");

        jLabel2.setText("Family name");

        jLabel4.setText("Address");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_fname, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_age, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField_address)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton_add.setText("Add");
        jButton_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addActionPerformed(evt);
            }
        });

        jButton_del.setText("Delete");
        jButton_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_delActionPerformed(evt);
            }
        });

        jButton_DB_OK.setText("OK");
        jButton_DB_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DB_OKActionPerformed(evt);
            }
        });

        jButton_Change.setText("Update");
        jButton_Change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ChangeActionPerformed(evt);
            }
        });

        jButton_DB_Cancel.setText("Cancel");
        jButton_DB_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DB_CancelActionPerformed(evt);
            }
        });

        jButton_persone.setText("Add persone");
        jButton_persone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_personeActionPerformed(evt);
            }
        });

        jButton_cancel_add.setText("Cancel");

        jTable_persone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_persone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_personeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_persone);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_persone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_cancel_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_DB_OK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_DB_Cancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_Change, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_del, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_add)
                    .addComponent(jButton_Change)
                    .addComponent(jButton_del)
                    .addComponent(jButton_DB_Cancel)
                    .addComponent(jButton_DB_OK, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_persone)
                    .addComponent(jButton_cancel_add))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
        );

        jPanel_map.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel_mapLayout = new javax.swing.GroupLayout(jPanel_map);
        jPanel_map.setLayout(jPanel_mapLayout);
        jPanel_mapLayout.setHorizontalGroup(
            jPanel_mapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 424, Short.MAX_VALUE)
        );
        jPanel_mapLayout.setVerticalGroup(
            jPanel_mapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_map, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_map, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        map = new JMapViewer();
        map.setTileSource(new OsmTileSource.Mapnik());
        map.setTileLoader(new OsmTileLoader(map));
        map.setTileGridVisible(map.isTileGridVisible());
        
        new DefaultMapController(map){
            @Override
            public void mouseClicked(MouseEvent e) {
                if ((states == 1)||(states == 2)) {
                    coordinateClass coord = new coordinateClass();
                    coord.lat = map.getPosition(e.getPoint()).getLat();
                    coord.lon = map.getPosition(e.getPoint()).getLon();
                    String address = getAddress(coord);                 
                    jTextField_address.setText(address);
                }
                System.out.println(map.getPosition(e.getPoint()));
            }
        };
                
        jPanel_map.setLayout(new BorderLayout());
        jPanel_map.add(map, BorderLayout.CENTER);
        jPanel_map.revalidate();
        
        jButton_DB_OK.setVisible(false);
        jButton_DB_Cancel.setVisible(false);
        String[] columns_name = {"ID_PERSONE","NAME","FAMILY_NAME","AGE","ADDRESS"};
        tablemodel = new DefaultTableModel(null, columns_name);
        jTable_persone.setModel(tablemodel);
        tablemodel = GetRowsDB(tablemodel);
        if (jTable_persone.getRowCount() > 0) {
            jTable_persone.setRowSelectionInterval(0, 0);
            getValuesFromTable(0,tablemodel);
            coordinateClass coord;
            coord = getCoordinate(jTable_persone.getValueAt(0, 4).toString());
            setMapPoint(coord);
            setMapCenter(coord, 17);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jTable_personeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_personeMouseClicked
        getValuesFromTable(jTable_persone.getSelectedRow(), jTable_persone.getModel());
    }//GEN-LAST:event_jTable_personeMouseClicked

    private void jButton_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addActionPerformed
        jButton_DB_OK.setVisible(true);
        jButton_DB_Cancel.setVisible(true);
        jTextField_name.setText("");
        jTextField_fname.setText("");
        jTextField_age.setText("");
        jTextField_address.setText("");
        jTextField_name.requestFocus();
        states = 1;
    }//GEN-LAST:event_jButton_addActionPerformed

    private void jButton_DB_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DB_OKActionPerformed
        Persone_class Persone = new Persone_class();
       
        Persone.name = jTextField_name.getText();
        Persone.Family_name = jTextField_fname.getText();
        Persone.Age = Integer.parseInt(jTextField_age.getText());
        Persone.Address = jTextField_address.getText();
        if (states == 1) {
            insertInDB(Persone);
        }
        if (states == 2) {
            Persone.ID = Integer.parseInt(tablemodel.getValueAt(jTable_persone.getSelectedRow(), 0).toString());
            updateDB(Persone);
        }      
        if (states == 3) {
            deleteDB(Integer.parseInt(tablemodel.getValueAt(jTable_persone.getSelectedRow(), 0).toString()));
        }  
        tablemodel.setRowCount(0);
        tablemodel = GetRowsDB(tablemodel);
        jTable_persone.setRowSelectionInterval(0, 0);
        getValuesFromTable(0,tablemodel);
        jButton_DB_OK.setVisible(false);
        jButton_DB_Cancel.setVisible(false);
        states = 0;
    }//GEN-LAST:event_jButton_DB_OKActionPerformed

    private void jButton_ChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ChangeActionPerformed
        jButton_DB_OK.setVisible(true);
        jButton_DB_Cancel.setVisible(true);
        jTextField_name.requestFocus();
        states = 2;
    }//GEN-LAST:event_jButton_ChangeActionPerformed

    private void jButton_DB_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DB_CancelActionPerformed
        jButton_DB_OK.setVisible(false);
        jButton_DB_Cancel.setVisible(false);
        states = 0;
    }//GEN-LAST:event_jButton_DB_CancelActionPerformed

    private void jButton_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_delActionPerformed
        jButton_DB_OK.setVisible(true);
        jButton_DB_Cancel.setVisible(true);
        states = 3;
    }//GEN-LAST:event_jButton_delActionPerformed

    private void jButton_personeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_personeActionPerformed
        if (format == 1) {
            addPersoneToEvent(ID_add_event, jTable_persone.getValueAt(jTable_persone.getSelectedRow(),0).toString());
            dispose();
        }    
    }//GEN-LAST:event_jButton_personeActionPerformed

    private void setMapPoint(coordinateClass coord) {
        map.removeAllMapMarkers();
        map.addMapMarker(new MapMarkerDot(coord.lat, coord.lon));
    }
    
    private void setMapCenter(coordinateClass coord, int zoom) {
        ICoordinate center = map.getPosition();
        center.setLat(coord.lat);
        center.setLon(coord.lon);
        map.setDisplayPosition(center, zoom);
    }
    
    private String getAddress(coordinateClass coord) {
        String address = "";
        try {
            String url = (URL + "?latlng=" + String.valueOf(coord.lat)+","+ String.valueOf(coord.lon) + "&key=" + DEFAULT_KEY);
            
            Document doc = Jsoup
                    .connect(url)
                    .userAgent("Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36")
                    .timeout(20000)
                    .get();
            
            Elements links = doc.select("formatted_address");     
            
            address = links.get(0).text();

        } catch (IOException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
        return address;
    }
    
    private coordinateClass getCoordinate(String addres_str) {
        coordinateClass coord = new coordinateClass();
        
        try {
            String url = (URL + "?address=" + addres_str + "&key=" + DEFAULT_KEY);
            
            Document doc = Jsoup
                    .connect(url)
                    .userAgent("Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36")
                    .timeout(20000)
                    .get();
            
            Elements links_lat = doc.select("location lat");
            Elements links_lon = doc.select("location lng");
            
            coord.lat = Float.parseFloat(links_lat.get(0).text());
            coord.lon = Double.parseDouble(links_lon.get(0).text());
            
            return coord;
        } catch (IOException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
            coord.lat = 51.8311104;
            coord.lon = 12.2429261;   
            return coord;
        }
    }
    
    private void addPersoneToEvent(String ID_Event, String ID_Persone) {
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment

            String query_str = "INSERT INTO GEO_PERSONE_EVENT (ID_EVENT,ID_PERSONE) VALUES ('"+ID_Event+"','" + ID_Persone + "')";
            stmt.executeQuery(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void insertInDB(Persone_class Persone) {
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment

            String query_str = "INSERT INTO GEO_PERSONE (NAME,FAMILY_NAME,AGE,ADDRESS) VALUES ('"+
                    Persone.name + "','" + Persone.Family_name + "','" + String.valueOf(Persone.Age) + "','" + Persone.Address + "')";
            stmt.executeQuery(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void deleteDB(int ID_del) {
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            //INSERT INTO table_name (column1,column2,column3,...)
            //VALUES (value1,value2,value3,...);
            String query_str = "DELETE FROM GEO_PERSONE WHERE ID_PERSONE='"+String.valueOf(ID_del)+"'";
            stmt.execute(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateDB(Persone_class Persone) {
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment

            String query_str = "UPDATE GEO_PERSONE SET NAME ='"+Persone.name+"',FAMILY_NAME='"+Persone.Family_name+"',AGE='"
                    +String.valueOf(Persone.Age)+"',ADDRESS='"+Persone.Address+"' WHERE ID_PERSONE='"+String.valueOf(Persone.ID)+"'";
            
            stmt.execute(query_str);
           
            db_connect.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void Set_format (int format_in) {
        format = format_in;
        if (format_in == 1) {
            jButton_add.setVisible(false);
            jButton_Change.setVisible(false);
            jButton_del.setVisible(false);   
            jButton_persone.setVisible(true);
            jButton_cancel_add.setVisible(true);
            jButton_persone.setText("Add Persone");
        }
        if (format_in == 2) {
            jButton_add.setVisible(true);
            jButton_Change.setVisible(true);
            jButton_del.setVisible(true);   
            jButton_persone.setVisible(false);
            jButton_cancel_add.setVisible(false);
        }
    }
    
    public void Place_send_event(String ID_Event) {
        ID_add_event = ID_Event;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(personeClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(personeClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(personeClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(personeClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new personeClass().setVisible(true);
            }
        });
    }
    
    public void getValuesFromTable(int row_n,TableModel tablemodel) {
        jTextField_name.setText(tablemodel.getValueAt(row_n, 1).toString());
        jTextField_fname.setText(tablemodel.getValueAt(row_n, 2).toString());
        jTextField_age.setText(tablemodel.getValueAt(row_n, 3).toString());
        jTextField_address.setText(tablemodel.getValueAt(row_n, 4).toString());
        
        coordinateClass coord;
        coord = getCoordinate(tablemodel.getValueAt(row_n, 4).toString());
        setMapPoint(coord);
        setMapCenter(coord, 17);
    }

    public DefaultTableModel GetRowsDB(DefaultTableModel tablemodel) {

        Persone_class Persones_get = new Persone_class();
        int counter = 0;
        
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "select * from GEO_PERSONE";
            
            //if (format == 1) {
            //    query_str = "SELECT P.ID_PERSONE, P.NAME, P.FAMILY_NAME, P.AGE, P.ADDRESS"
            //            + " FROM GEO_PERSONE P"
            //            + " INNER JOIN GEO_PERSONE_EVENT PE ON P.ID_PERSONE = PE.ID_PERSONE"
            //            + " WHERE not (ID_EVENT = '"+ID_add_event+"')"; //Create query
            //}
            
            
            ResultSet query_result = stmt.executeQuery(query_str);
            
            while(query_result.next()){  
                Persones_get.ID = query_result.getInt("ID_PERSONE");                
                Persones_get.name = query_result.getString("NAME");
                Persones_get.Family_name = query_result.getString("FAMILY_NAME");
                Persones_get.Age = query_result.getInt("AGE");
                Persones_get.Address = query_result.getString("ADDRESS");
                String[] row = {String.valueOf(Persones_get.ID),Persones_get.name,Persones_get.Family_name,String.valueOf(Persones_get.Age),Persones_get.Address};
                tablemodel.addRow(row);
                counter++;
            }
            
            db_connect.close();
            stmt.close();
            query_result.close();
            
            count_persons = counter;
        } catch (SQLException ex) {
            Logger.getLogger(personeClass.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tablemodel;
    }
        
    public void setConn_params (String driver,String url,String login,String pass) {
        driver_db = driver;
        url_db = url;
        login_db = login;
        pass_db = pass;
    }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Change;
    private javax.swing.JButton jButton_DB_Cancel;
    private javax.swing.JButton jButton_DB_OK;
    private javax.swing.JButton jButton_add;
    private javax.swing.JButton jButton_cancel_add;
    private javax.swing.JButton jButton_del;
    private javax.swing.JButton jButton_persone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_map;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_persone;
    private javax.swing.JTextField jTextField_address;
    private javax.swing.JTextField jTextField_age;
    private javax.swing.JTextField jTextField_fname;
    private javax.swing.JTextField jTextField_name;
    // End of variables declaration//GEN-END:variables
}
