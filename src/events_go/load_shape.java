package events_go;

import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import oracle.spatial.geometry.JGeometry;
import oracle.spatial.util.DBFReaderJGeom;
import oracle.spatial.util.ShapefileFeatureJGeom;
import oracle.spatial.util.ShapefileReaderJGeom;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sergey
 */

public class load_shape extends javax.swing.JFrame {

    String header[] = {"N.col","Insert","Field"};
    String prj_file_name;
    String shp_file_name;
    String shx_file_name;
    String dbf_file_name;
    String files_path;
    

    DefaultComboBoxModel tables_list_model = new DefaultComboBoxModel();
    String[] tableHead = {"File","Data base"};
    DefaultTableModel tablemodel = new DefaultTableModel(null, tableHead);
    Columns_rec_class Columns_rec = new Columns_rec_class();
            
    private String driver_db;
    private String url_db;
    private String login_db;
    private String pass_db;
    
    /**
     * Creates new form load_shape
     */
      
    public load_shape() {
        initComponents();
        jComboBox_tables.setModel(tables_list_model);
        jTable_columns.setModel(tablemodel);
        tablemodel.setColumnCount(2);
        tablemodel.setRowCount(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser_addfile = new javax.swing.JFileChooser();
        jButton_addfiles = new javax.swing.JButton();
        jTextField_file = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton_load = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_columns = new javax.swing.JTable();
        jComboBox_tables = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        jFileChooser_addfile.setApproveButtonToolTipText("");
        jFileChooser_addfile.setDialogTitle("Open file");

        setTitle("Load shape files");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton_addfiles.setText("Add files");
        jButton_addfiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addfilesActionPerformed(evt);
            }
        });

        jLabel4.setText("Load files names");

        jButton_load.setText("Load data to Base");
        jButton_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_loadActionPerformed(evt);
            }
        });

        jLabel5.setText("Table name");

        jTable_columns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Output", "Input"
            }
        ));
        jTable_columns.setRowHeight(21);
        jScrollPane1.setViewportView(jTable_columns);

        jComboBox_tables.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_tables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_tablesActionPerformed(evt);
            }
        });

        jButton1.setText("Add metadata");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField_file, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_addfiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jComboBox_tables, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_load)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_addfiles)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox_tables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_load)
                    .addComponent(jButton1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
              
    //Add files
    private void jButton_addfilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addfilesActionPerformed
        if (jFileChooser_addfile.showOpenDialog(load_shape.this) == JFileChooser.APPROVE_OPTION) {
            String input_file = jFileChooser_addfile.getSelectedFile().getPath();
            prj_file_name = input_file.substring(0, input_file.indexOf("."))+".prj";
            shp_file_name = input_file.substring(0, input_file.indexOf("."))+".shp";
            shx_file_name = input_file.substring(0, input_file.indexOf("."))+".shx";
            dbf_file_name = input_file.substring(0, input_file.indexOf("."))+".dbf";
            jTextField_file.setText(jFileChooser_addfile.getSelectedFile().getName());
            tablemodel.setRowCount(2);
            get_columns_dbf();
        }      
    }//GEN-LAST:event_jButton_addfilesActionPerformed

    private void get_tables_db() {
        String[] column_table_name = new String[100]; //Names of columns
        int column_count = 0; //Cont of columns
        
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "SELECT table_name\n" +
                    "FROM user_tables\n" +
                    "Where table_name Like 'GEO%'"; //Create query
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            while(query_result.next()){    		
                column_table_name[column_count] = query_result.getString("TABLE_NAME");
                tables_list_model.addElement(column_table_name[column_count]);
                column_count++;
            }
            
            db_connect.close();
            stmt.close();
            query_result.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void get_columns_db(String table_name) {
        Columns_rec.column_count = 0; //Cont of columns
        
        try {
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement(); //Create statment
            String query_str = "select COLUMN_NAME, DATA_TYPE from ALL_TAB_COLUMNS where TABLE_NAME='"+ table_name+"'"; //Create query
            ResultSet query_result = stmt.executeQuery(query_str); //Get result
            
            Columns_rec.column_count = 0;

            while(query_result.next()){    		
                Columns_rec.column_name_buf[Columns_rec.column_count] = query_result.getString("COLUMN_NAME");
                Columns_rec.column_type_buf[Columns_rec.column_count] = query_result.getString("DATA_TYPE");
                Columns_rec.column_count++;
            }
            
            String[] column_name = new String[Columns_rec.column_count+1]; //Names of columns
            column_name[0] = "None";
            
            for (int i=1; i<Columns_rec.column_count+1; i++) {
                column_name[i] = Columns_rec.column_name_buf[i-1]; 
            }
            
            TableColumn col = jTable_columns.getColumnModel().getColumn(1);

            col.setCellEditor(new MyComboBoxEditor(column_name));
            col.setCellRenderer(new MyComboBoxRenderer(column_name));
        
            db_connect.close();
            stmt.close();
            query_result.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
            
    private void get_columns_dbf() {
        try {
            DBFReaderJGeom dbfreader = new DBFReaderJGeom (dbf_file_name);
            ShapefileReaderJGeom shpreader = new ShapefileReaderJGeom(shp_file_name);
            ShapefileFeatureJGeom sf = new ShapefileFeatureJGeom();
            
            // Опрос количества и типа столбцов
            int numFields=dbfreader.numFields(); //Count columns
            byte[] fieldTypes=new byte[numFields];
            String[] fieldNames=new String[numFields];
            tablemodel.setRowCount(numFields+1);
            tablemodel.setValueAt("Shape", 0, 0);
            for (int field=0; field < numFields; field++) {
                fieldTypes[field] = dbfreader.getFieldType(field); //Types of columns
                fieldNames[field] = dbfreader.getFieldName(field);
                tablemodel.setValueAt(fieldNames[field], field+1, 0);
            }
        } catch (IOException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    
    private void jButton_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_loadActionPerformed
        String sql = "INSERT INTO " + jComboBox_tables.getSelectedItem().toString()+" (";//Prepary query
        String sql_2 = ") VALUES (";
        int count = 0;
        
        try {

            //Prepare query
            for (int row=0; row<tablemodel.getRowCount(); row++) {
                String db_col = tablemodel.getValueAt(row, 1).toString();
                if (!"None".equals(db_col)) {
                    if (count == 0) {

                        sql = sql + db_col;  
                        sql_2 = sql_2 + "?";
                    } else {
                        sql = sql + "," + db_col;
                        sql_2 = sql_2 + "," + "?";
                    }
                    count++;
                }
            }

            sql = sql + sql_2 + ")";//"INSERT INTO MAP(ID, NAME, GEOM) VALUES (?,?,?)";

            //Connect to DB
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            PreparedStatement stmt=db_connect.prepareStatement(sql);

            //Prepare files
            DBFReaderJGeom dbfreader = new DBFReaderJGeom (dbf_file_name);
            ShapefileReaderJGeom shpreader = new ShapefileReaderJGeom(shp_file_name);
            ShapefileFeatureJGeom sf = new ShapefileFeatureJGeom();
            int numFields=dbfreader.numFields();
            byte[] fieldTypes=new byte[numFields];
            for (int field=0; field < numFields; field++)
            fieldTypes[field] = dbfreader.getFieldType(field);

            int counter_row; //Счетчик строк без None
            
            for (int i=0; i<shpreader.numRecords(); i++) //По строкам в таблице файла
            {
                counter_row = 1;
                for (int row=0; row<tablemodel.getRowCount(); row++) { //По строкам в текущей таблице на форме
                    String db_col = tablemodel.getValueAt(row, 1).toString(); //Имя название поля в базе данных
                    String dbf_col = tablemodel.getValueAt(row, 0).toString(); //Имя название поля в файле
                    if (!"None".equals(db_col)) {
                        for (int col_db=0; col_db<Columns_rec.column_count; col_db++) { //Поиск названия в списке и сопоставление типа
                            if (Columns_rec.column_name_buf[col_db] == db_col) {
                                if (("VARCHAR2".equals(Columns_rec.column_type_buf[col_db])) || ("VARCHAR".equals(Columns_rec.column_type_buf[col_db]))) {
                                    Hashtable ht= sf.fromRecordToFeature(dbfreader, shpreader, fieldTypes, numFields, i, 0);
                                    String s2=(ht.get(dbf_col)).toString();
                                    stmt.setString(counter_row,s2);
                                    break;
                                } 
                                if ("NUMBER".equals(Columns_rec.column_type_buf[col_db])) {
                                    Hashtable ht= sf.fromRecordToFeature(dbfreader, shpreader, fieldTypes, numFields, i, 0);
                                    int buf_int= Integer.parseInt((ht.get(dbf_col)).toString());
                                    stmt.setInt(counter_row,buf_int);
                                    break;
                                }  
                                if ("FLOAT".equals(Columns_rec.column_type_buf[col_db])) {
                                    Hashtable ht= sf.fromRecordToFeature(dbfreader, shpreader, fieldTypes, numFields, i, 0);
                                    float buf_float = Float.parseFloat((ht.get(dbf_col)).toString());
                                    stmt.setFloat(counter_row, buf_float);
                                    break;
                                }  
                                if ("SDO_GEOMETRY".equals(Columns_rec.column_type_buf[col_db])) {
                                    byte [] data=shpreader.getGeometryBytes(i);
                                    JGeometry geom = ShapefileReaderJGeom.getGeometry (data, 0);
                                    stmt.setObject(counter_row,JGeometry.store(geom,db_connect));
                                    break;
                                }  
                            }
                        }
                        counter_row++;
                    }
                }
                stmt.execute();
            }
        
        db_connect.close();
        stmt.close();
            
        } catch (IOException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }   catch (SQLException ex) {
                Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_loadActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        get_tables_db();
        DefaultTableModel model = (DefaultTableModel) jTable_columns.getModel();
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox_tablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_tablesActionPerformed
        get_columns_db(jComboBox_tables.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox_tablesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            //Connect to DB
            Connection db_connect = DriverManager.getConnection(url_db,login_db,pass_db);
            Statement stmt = db_connect.createStatement();
            
            String str = "INSERT INTO USER_SDO_GEOM_METADATA"
                    + "	VALUES('MAP',"
                    + "'GEOM',"
                    + "MDSYS.SDO_DIM_ARRAY( MDSYS.SDO_DIM_ELEMENT('X', 0, 10, 0.005),"
                    + "MDSYS.SDO_DIM_ELEMENT('Y', 0, 10, 0.005)),"
                    + "NULL)";
            
            stmt.executeQuery(str);
            
            db_connect.close();
            stmt.close();
        
        } catch (SQLException ex) {
            Logger.getLogger(load_shape.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
             
    public void setConn_params (String driver,String url,String login,String pass) {
        driver_db = driver;
        url_db = url;
        login_db = login;
        pass_db = pass;
    }
     
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(load_shape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(load_shape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(load_shape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(load_shape.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new load_shape().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_addfiles;
    private javax.swing.JButton jButton_load;
    private javax.swing.JComboBox jComboBox_tables;
    private javax.swing.JFileChooser jFileChooser_addfile;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_columns;
    private javax.swing.JTextField jTextField_file;
    // End of variables declaration//GEN-END:variables
}

class MyComboBoxRenderer extends JComboBox implements TableCellRenderer {
  public MyComboBoxRenderer(String[] items) {
    super(items);
  }

  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    if (isSelected) {
      setForeground(Color.GREEN);
      super.setBackground(table.getSelectionBackground());
    } else {
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    setSelectedItem(value);
    return this;
  }
}

class MyComboBoxEditor extends DefaultCellEditor {
  public MyComboBoxEditor(String[] items) {
    super(new JComboBox(items));
  }
}

class Columns_rec_class {
    public  String[] column_type_buf = new String[100]; //types of columns
    public String[] column_name_buf = new String[100]; //Names of columns
    public int column_count; //Cont of columns
}